{"ast":null,"code":"console.log(\"OpenAI Key:\", process.env.REACT_APP_OPENAI_API_KEY);\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nexport const getBookSummary = async bookTitle => {\n  try {\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: \"You are a helpful assistant that summarizes books.\"\n        }, {\n          role: \"user\",\n          content: `Summarize the book \"${bookTitle}\" in 3 sentences.`\n        }]\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error(\"Error fetching summary from OpenAI:\", error.message);\n    return \"Summary could not be generated.\";\n  }\n};","map":{"version":3,"names":["console","log","process","env","REACT_APP_OPENAI_API_KEY","OPENAI_API_KEY","getBookSummary","bookTitle","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","ok","Error","status","data","json","choices","message","error"],"sources":["/Users/paulgiliberto/Downloads/SPRING2025/CSC2053/git/my_repo/project3-BookRecommender/src/services/openai.js"],"sourcesContent":["console.log(\"OpenAI Key:\", process.env.REACT_APP_OPENAI_API_KEY);\n\n\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\nexport const getBookSummary = async (bookTitle) => {\n  try {\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\",\n      {\n        method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a helpful assistant that summarizes books.\",\n          },\n          {\n            role: \"user\",\n            content: `Summarize the book \"${bookTitle}\" in 3 sentences.`,\n          },\n        ],\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error(\"Error fetching summary from OpenAI:\", error.message);\n    return \"Summary could not be generated.\";\n  }\n};"],"mappings":"AAAAA,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC;AAGhE,MAAMC,cAAc,GAAGH,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAE3D,OAAO,MAAME,cAAc,GAAG,MAAOC,SAAS,IAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EACvE;MACEC,MAAM,EAAE,MAAM;MAChBC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUP,cAAc,EAAE;QACzC,cAAc,EAAE;MAClB,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE;QACX,CAAC,EACD;UACED,IAAI,EAAE,MAAM;UACZC,OAAO,EAAE,uBAAuBZ,SAAS;QAC3C,CAAC;MAEL,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkCb,QAAQ,CAACc,MAAM,EAAE,CAAC;IACtE;IAEA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACP,OAAO;EACxC,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd3B,OAAO,CAAC2B,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACD,OAAO,CAAC;IACnE,OAAO,iCAAiC;EAC1C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}